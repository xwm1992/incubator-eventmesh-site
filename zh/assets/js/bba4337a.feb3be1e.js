"use strict";(self.webpackChunkincubator_eventmesh_site=self.webpackChunkincubator_eventmesh_site||[]).push([[7755],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=s(n),h=i,d=m["".concat(p,".").concat(h)]||m[h]||u[h]||a;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={},o="Collect Trace with Zipkin",c={unversionedId:"metrics-tracing/zipkin",id:"metrics-tracing/zipkin",title:"Collect Trace with Zipkin",description:"Zipkin",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/metrics-tracing/02-zipkin.md",sourceDirName:"metrics-tracing",slug:"/metrics-tracing/zipkin",permalink:"/zh/docs/metrics-tracing/zipkin",draft:!1,editUrl:"https://github.com/apache/incubator-eventmesh-site/edit/master/docs/metrics-tracing/02-zipkin.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Observe Metrics with Prometheus",permalink:"/zh/docs/metrics-tracing/prometheus"},next:{title:"EventMesh Workflow",permalink:"/zh/docs/design-document/workflow"}},p={},s=[{value:"Zipkin",id:"zipkin",level:2},{value:"Configuration",id:"configuration",level:2}],l={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"collect-trace-with-zipkin"},"Collect Trace with Zipkin"),(0,i.kt)("h2",{id:"zipkin"},"Zipkin"),(0,i.kt)("p",null,"Distributed tracing is a method used to profile and monitor applications built with microservices architecture. Distributed tracing helps pinpoint where failures occur and what causes poor performance."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://zipkin.io"},"Zipkin")," is a distributed tracing system that helps collect timing data needed to troubleshoot latency problems in service architectures. EventMesh exposes a collection of trace data that could be collected and analyzed by Zipkin. Please follow ",(0,i.kt)("a",{parentName:"p",href:"https://zipkin.io/pages/quickstart.html"},'the "Zipkin Quickstart" tutorial')," to download and install the latest release of Zipkin."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"To enable the trace exporter of EventMesh Runtime, set the ",(0,i.kt)("inlineCode",{parentName:"p"},"eventMesh.server.trace.enabled")," field in the ",(0,i.kt)("inlineCode",{parentName:"p"},"conf/eventmesh.properties")," file to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},"# Trace plugin\neventMesh.server.trace.enabled=true\neventMesh.trace.plugin=zipkin\n")),(0,i.kt)("p",null,"To customize the behavior of the trace exporter such as timeout or export interval, edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"exporter.properties")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},"# Set the maximum batch size to use\neventmesh.trace.max.export.size=512\n# Set the queue size. This must be >= the export batch size\neventmesh.trace.max.queue.size=2048\n# Set the max amount of time an export can run before getting(TimeUnit=SECONDS)\neventmesh.trace.export.timeout=30\n# Set time between two different exports (TimeUnit=SECONDS)\neventmesh.trace.export.interval=5\n")),(0,i.kt)("p",null,"To send the exported trace data to Zipkin, edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"eventmesh.trace.zipkin.ip")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"eventmesh.trace.zipkin.port")," fields in the ",(0,i.kt)("inlineCode",{parentName:"p"},"conf/zipkin.properties")," file to match the configuration of the Zipkin server."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},"# Zipkin's IP and Port\neventmesh.trace.zipkin.ip=localhost\neventmesh.trace.zipkin.port=9411\n")))}u.isMDXComponent=!0}}]);